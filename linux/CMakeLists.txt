cmake_minimum_required(VERSION 3.10)
project(flathub LANGUAGES CXX)

# ==== App / Build settings ====
set(BINARY_NAME "flathub")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Use a valid reverse-DNS app id (must contain at least one dot)
set(APPLICATION_ID "org.example.flathub")

get_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(IS_MULTICONFIG)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Profile;Release")
  set(CMAKE_BUILD_TYPE ${CMAKE_CONFIGURATION_TYPES})
endif()

# ==== System deps ====
find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK  REQUIRED gtk+-3.0)
pkg_check_modules(GLIB REQUIRED glib-2.0)
pkg_check_modules(GIO  REQUIRED gio-2.0)

# ==== Flutter toolchain / generated config ====
# Provides: FLUTTER_LIBRARY, FLUTTER_ICU_DATA_FILE, PROJECT_BUILD_DIR, flutter_assemble, etc.
add_subdirectory(flutter)

# ---- Native installer plugin (static lib) ----
add_library(installer_plugin STATIC
  "runner/installer_plugin.cc"
  "runner/installer_plugin.h"
)
target_include_directories(installer_plugin PRIVATE
  "${CMAKE_CURRENT_SOURCE_DIR}/runner"
  ${GTK_INCLUDE_DIRS}
  ${GLIB_INCLUDE_DIRS}
  ${GIO_INCLUDE_DIRS}
)
target_link_libraries(installer_plugin PRIVATE
  flutter
  ${GTK_LIBRARIES}
  ${GLIB_LIBRARIES}
  ${GIO_LIBRARIES}
)

# ---- Runner executable ----
add_executable(${BINARY_NAME}
  "runner/main.cc"
  "runner/my_application.cc"
  "runner/my_application.h"
  "${CMAKE_CURRENT_SOURCE_DIR}/flutter/generated_plugin_registrant.cc"
)

target_compile_definitions(${BINARY_NAME} PRIVATE APPLICATION_ID="${APPLICATION_ID}")
target_include_directories(${BINARY_NAME} PRIVATE
  "${CMAKE_SOURCE_DIR}"
  "${CMAKE_CURRENT_SOURCE_DIR}/flutter"
  ${GTK_INCLUDE_DIRS}
  ${GLIB_INCLUDE_DIRS}
  ${GIO_INCLUDE_DIRS}
)
target_link_libraries(${BINARY_NAME} PRIVATE
  flutter
  installer_plugin
  ${GTK_LIBRARIES}
  ${GLIB_LIBRARIES}
  ${GIO_LIBRARIES}
)

# Ensure the runner finds libflutter at runtime from bundle/lib
set_target_properties(${BINARY_NAME} PROPERTIES
  INSTALL_RPATH "\$ORIGIN/lib"
  BUILD_RPATH   "\$ORIGIN/lib"
)

# Generated plugin glue
include(flutter/generated_plugins.cmake)

# Make sure Flutter artifacts (engine + assets) are built before linking/running
add_dependencies(${BINARY_NAME} flutter_assemble)

# ==== Install a relocatable bundle in build dir ====
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "Install prefix" FORCE)
endif()

# Install the runner binary into the bundle root
install(TARGETS ${BINARY_NAME} RUNTIME DESTINATION ".")

# Bundle directories (match Flutter template)
set(INSTALL_BUNDLE_DATA_DIR "data")
set(INSTALL_BUNDLE_LIB_DIR  "lib")

# --- Copy Flutter engine (libflutter_linux_gtk.so) into bundle/lib ---
# Copy from the ephemeral location generated by Flutter tooling
install(FILES
  "${CMAKE_CURRENT_SOURCE_DIR}/flutter/ephemeral/libflutter_linux_gtk.so"
  DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
)

# --- Copy ICU data file into bundle/data ---
install(FILES
  "${CMAKE_CURRENT_SOURCE_DIR}/flutter/ephemeral/icudtl.dat"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
)

# --- Copy Flutter assets into bundle/data/flutter_assets ---
# Don't guard with EXISTS; these appear after build and are available at install time.
install(DIRECTORY
  "${PROJECT_BUILD_DIR}/flutter_assets"
  DESTINATION "${INSTALL_BUNDLE_DATA_DIR}"
)

# --- In release/AOT builds, copy app.so if present (harmless in debug) ---
install(FILES
  "${PROJECT_BUILD_DIR}/app.so"
  DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"
  OPTIONAL
)
